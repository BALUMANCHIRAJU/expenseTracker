import java.io.*;
import java.time.*;
import java.util.*;

// Class to represent an individual expense
class Expense implements Serializable {
    private double amount;
    private String category;
    private String description;
    private LocalDate date;

    public Expense(double amount, String category, String description) {
        this.amount = amount;
        this.category = category;
        this.description = description;
        this.date = LocalDate.now();
    }

    public double getAmount() { return amount; }
    public String getCategory() { return category; }
    public String getDescription() { return description; }
    public LocalDate getDate() { return date; }

    @Override
    public String toString() {
        return String.format("Date: %s, Amount: $%.2f, Category: %s, Description: %s",
                date, amount, category, description);
    }

    // Convert expense to CSV format for file storage
    public String toCSV() {
        return String.format("%s,%.2f,%s,%s%n",
                date, amount, category, description);
    }
}

// Class to manage all expense-related operations
class ExpenseManager {
    private List<Expense> expenses;
    private static final String FILE_PATH = "expenses.txt";

    public ExpenseManager() {
        expenses = new ArrayList<>();
        loadExpenses();
    }

    // Add a new expense
    public void addExpense(double amount, String category, String description) {
        Expense expense = new Expense(amount, category, description);
        expenses.add(expense);
        saveExpenses();
    }

    // Save expenses to file
    private void saveExpenses() {
        try (PrintWriter writer = new PrintWriter(new FileWriter(FILE_PATH))) {
            for (Expense expense : expenses) {
                writer.write(expense.toCSV());
            }
        } catch (IOException e) {
            System.out.println("Error saving expenses: " + e.getMessage());
        }
    }

    // Load expenses from file
    private void loadExpenses() {
        File file = new File(FILE_PATH);
        if (!file.exists()) return;

        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length == 4) {
                    double amount = Double.parseDouble(parts[1]);
                    expenses.add(new Expense(amount, parts[2], parts[3]));
                }
            }
        } catch (IOException e) {
            System.out.println("Error loading expenses: " + e.getMessage());
        }
    }

    // Get total expenses for a specific date
    public double getDailyTotal(LocalDate date) {
        return expenses.stream()
                .filter(e -> e.getDate().equals(date))
                .mapToDouble(Expense::getAmount)
                .sum();
    }

    // Get total expenses for the current week
    public double getWeeklyTotal() {
        LocalDate now = LocalDate.now();
        LocalDate weekStart = now.minusDays(now.getDayOfWeek().getValue() - 1);
        return expenses.stream()
                .filter(e -> !e.getDate().isBefore(weekStart) && !e.getDate().isAfter(now))
                .mapToDouble(Expense::getAmount)
                .sum();
    }

    // Get total expenses for the current month
    public double getMonthlyTotal() {
        LocalDate now = LocalDate.now();
        return expenses.stream()
                .filter(e -> e.getDate().getMonth() == now.getMonth() &&
                           e.getDate().getYear() == now.getYear())
                .mapToDouble(Expense::getAmount)
                .sum();
    }

    // Get all expenses
    public List<Expense> getAllExpenses() {
        return new ArrayList<>(expenses);
    }
}

// Main class with user interface
public class ExpenseTracker {
    private static ExpenseManager manager = new ExpenseManager();
    private static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        while (true) {
            displayMenu();
            int choice = getUserChoice();
            
            switch (choice) {
                case 1:
                    addNewExpense();
                    break;
                case 2:
                    viewSummary();
                    break;
                case 3:
                    viewAllExpenses();
                    break;
                case 4:
                    System.out.println("Thank you for using the Expense Tracker!");
                    return;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }

    private static void displayMenu() {
        System.out.println("\n=== Daily Expense Tracker ===");
        System.out.println("1. Add New Expense");
        System.out.println("2. View Summary");
        System.out.println("3. View All Expenses");
        System.out.println("4. Exit");
        System.out.print("Enter your choice: ");
    }

    private static int getUserChoice() {
        try {
            return Integer.parseInt(scanner.nextLine());
        } catch (NumberFormatException e) {
            return -1;
        }
    }

    private static void addNewExpense() {
        System.out.print("Enter amount: $");
        double amount = Double.parseDouble(scanner.nextLine());

        System.out.print("Enter category (food/travel/utilities/other): ");
        String category = scanner.nextLine();

        System.out.print("Enter description: ");
        String description = scanner.nextLine();

        manager.addExpense(amount, category, description);
        System.out.println("Expense added successfully!");
    }

    private static void viewSummary() {
        System.out.println("\n=== Expense Summary ===");
        System.out.printf("Today's total: $%.2f%n", 
                manager.getDailyTotal(LocalDate.now()));
        System.out.printf("This week's total: $%.2f%n", 
                manager.getWeeklyTotal());
        System.out.printf("This month's total: $%.2f%n", 
                manager.getMonthlyTotal());
    }

    private static void viewAllExpenses() {
        System.out.println("\n=== All Expenses ===");
        List<Expense> allExpenses = manager.getAllExpenses();
        if (allExpenses.isEmpty()) {
            System.out.println("No expenses recorded yet.");
            return;
        }
        
        for (Expense expense : allExpenses) {
            System.out.println(expense);
        }
    }
}
